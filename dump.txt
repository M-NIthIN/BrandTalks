import streamlit as st
import pandas as pd
import json
from wordcloud import WordCloud
import plotly.express as px
import matplotlib.pyplot as plt

with open("youtube_dummy.json", "r") as file:
    transformed_data = json.load(file)

st.set_page_config(page_title="BrandTalks", page_icon="ðŸ“Š", layout="wide")
st.title("BrandTalks")
st.subheader("Capturing Brand-related info across social platforms.")

brand_name = st.text_input("Enter Brand Name", value="Brand X", placeholder="Type here...")
if st.button("Search") or brand_name.strip():

    # Youtube Media card
    st.subheader(f"YouTube - {transformed_data['brand_name']} - Media Card")
    line_data = []
    for video in transformed_data["videos"]:
        for point in video["sentiment_over_time"]:
            line_data.append({
                "timestamp": point["timestamp"],
                "sentiment_score": point["sentiment_score"],
                "video_id": video["video_id"]
            })
    df_line = pd.DataFrame(line_data)

    col1, col2, col3 = st.columns([7,1,2])
    with col1:
        st.markdown(f"<h5>Sentimental Analysis over time </h5>",unsafe_allow_html=True)
        fig = px.line(df_line, x="timestamp", y="sentiment_score", color="video_id",
                      labels={"video_id": "Video ID", "timestamp": "Timestamp (s)", "sentiment_score": "Sentiment Score"})
        fig.update_layout(legend_title="Videos")
        st.plotly_chart(fig, use_container_width=True)

    with col2:
        selected_video = st.selectbox("Video ID",options=["All"] + [v["video_id"] for v in transformed_data["videos"]])

    with col3:
        if selected_video != "All":
            video = next(v for v in transformed_data["videos"] if v["video_id"] == selected_video)
            stats = {
                "Views": video["views"],
                "Likes": video["likes"],
                "Comments": video["comments"],
                "Sentiment Score": video["sentiment_score"],
                "Engagement Ratio": video["engagement_ratio"]
            }
        else:
            stats = {
                "Views": transformed_data["total_views"],
                "Likes": transformed_data["total_likes"],
                "Comments": transformed_data["total_comments"],
                "Sentiment Score": round(transformed_data["sentiment_score"], 2),
                "Engagement Ratio": transformed_data["engagement_ratio"]
            }

        cols = st.columns(2)
        cols[0].markdown(f"<h5>Views</h5><p>{stats['Views']}</p>", unsafe_allow_html=True)
        cols[1].markdown(f"<h5>Likes</h5><p>{stats['Likes']}</p>", unsafe_allow_html=True)
        cols[0].markdown(f"<h5>Comments</h5><p>{stats['Comments']}</p>", unsafe_allow_html=True)
        cols[1].markdown(f"<h5>Sentiment Score</h5><p>{stats['Sentiment Score']}</p>", unsafe_allow_html=True)
        cols[0].markdown(f"<h5>Engagement Ratio</h5><p>{stats['Engagement Ratio']}</p>", unsafe_allow_html=True)


    col1, col2 = st.columns([7, 3])

    if selected_video == "All":
        summary_text = transformed_data["overall_summary"]
        word_cloud_data = transformed_data["total_word_cloud"]
    else:
        summary_text = video["summary"]
        word_cloud_data = video["word_cloud"]

    with col1:
        st.markdown(f"<h5>Summary</h5>",unsafe_allow_html=True)
        st.text(summary_text)
    with col2:
        wordcloud = WordCloud(width=200, height=100, background_color="white").generate_from_frequencies(word_cloud_data)
        fig, ax = plt.subplots()
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis("off")
        st.pyplot(fig)



import streamlit as st
import pandas as pd
import json
from wordcloud import WordCloud
import plotly.express as px
import matplotlib.pyplot as plt

# Dummy data loading
with open("youtube_dummy.json", "r") as file:
    transformed_data = json.load(file)

# Layout
st.set_page_config(page_title="BrandTalks", page_icon="ðŸ“Š", layout="wide")
st.title("BrandTalks")
st.write("Analyze brand media presence across social platforms.")

# Input for brand name
brand_name = st.text_input("Enter Brand Name", value="Brand X", placeholder="Type here...")
if st.button("Search") or brand_name.strip():
    st.markdown(
        f"""
        <div style="border: 2px solid red; border-radius: 10px; padding: 20px; margin-bottom: 20px;">
            <h2 style="text-align: center;">YouTube {transformed_data['brand_name']} Media Card</h2>
        </div>
        """, unsafe_allow_html=True
    )

    # Line Graph Data Preparation
    line_data = []
    for video in transformed_data["videos"]:
        for point in video["sentiment_over_time"]:
            line_data.append({
                "timestamp": point["timestamp"],
                "sentiment_score": point["sentiment_score"],
                "video_id": video["video_id"]
            })
    df_line = pd.DataFrame(line_data)

    # Interactive Line Graph
    fig = px.line(
        df_line, 
        x="timestamp", 
        y="sentiment_score", 
        color="video_id",
        labels={"video_id": "Video ID", "timestamp": "Timestamp (s)", "sentiment_score": "Sentiment Score"},
        title="Sentiment Analysis Over Time"
    )
    st.plotly_chart(fig, use_container_width=True)

    # Placeholder for dynamic stats, summary, and word cloud
    selected_video = st.selectbox("Select Video ID", options=["All"] + [v["video_id"] for v in transformed_data["videos"]])

    if selected_video == "All":
        # Default to overall stats
        stats = {
            "Views": transformed_data["total_views"],
            "Likes": transformed_data["total_likes"],
            "Comments": transformed_data["total_comments"],
            "Sentiment Score": round(transformed_data["sentiment_score"], 2),
            "Engagement Ratio": transformed_data["engagement_ratio"]
        }
        summary = transformed_data["overall_summary"]
        word_cloud_data = transformed_data["total_word_cloud"]
    else:
        # Display stats for the selected video
        video = next(v for v in transformed_data["videos"] if v["video_id"] == selected_video)
        stats = {
            "Views": video["views"],
            "Likes": video["likes"],
            "Comments": video["comments"],
            "Sentiment Score": round(sum(point["sentiment_score"] for point in video["sentiment_over_time"]) / len(video["sentiment_over_time"]), 2),
            "Engagement Ratio": video["engagement_ratio"]
        }
        summary = video["summary"]
        word_cloud_data = video["word_cloud"]

    # Display Stats (auto-arranging in rows)
    st.markdown("### Statistics")
    stats_keys = list(stats.keys())
    cols = st.columns(5)
    for i, key in enumerate(stats_keys):
        cols[i % 5].metric(key, stats[key])

    # Display Summary and Word Cloud
    st.markdown("### Summary and Word Cloud")
    col1, col2 = st.columns([3, 1])

    # Summary
    with col1:
        st.text(summary)

    # Word Cloud
    with col2:
        wordcloud = WordCloud(width=400, height=200, background_color="white").generate_from_frequencies(word_cloud_data)
        fig, ax = plt.subplots()
        ax.imshow(wordcloud, interpolation='bilinear')
        ax.axis("off")
        st.pyplot(fig)





{
  "brand_name": "Brand A",
  "total_views": 1234,
  "total_likes": 234,
  "total_comments": 34,
  "overall_summary": "some random text is used for now",
  "total_duration": 12349,
  "sentiment_score": 98.348,
  "engagement_ratio": 0.92,
  "toatl_word_cloud": {"xyz":10, "yzx":3,"zyx":4}
  "videos": [
    {
      "video_id": "abc123",
      "views": 123
      "likes": 23,
      "comments": 3,
      "sentiment_over_time": [
        {"timestamp": 0, "sentiment_score": 0.5},
        {"timestamp": 10, "sentiment_score": 0.8}
      ],
      "engagement_ratio": 0.1,
      "summary": "Brand A promo video with a focus on product introduction.",
      "word_cloud": {"Brand": 10, "A": 7, "products": 5}
    },
    {
      "video_id": "def456",
      "views": 123
      "likes": 23,
      "comments": 3,
      "sentiment_over_time": [
        {"timestamp": 0, "sentiment_score": 0.6},
        {"timestamp": 15, "sentiment_score": 0.9}
      ],
      "engagement_ratio": 0.15,
      "summary": "Launch event showcasing new features of Brand A.",
      "word_cloud": {"Launch": 12, "event": 8, "features": 6}
    }
  ]
}